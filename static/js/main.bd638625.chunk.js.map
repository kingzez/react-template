{"version":3,"sources":["assets/logo.svg","reducers/counter.ts","reducers/sidebar.ts","reducers/index.ts","sagas/index.ts","configureStore.ts","serviceWorker.ts","containers/Layout/NavBar.tsx","actions/sidebar.ts","components/loading/index.tsx","routes/index.tsx","containers/Layout/SideBar.tsx","containers/Layout/Content.tsx","containers/Layout/index.tsx","index.tsx"],"names":["module","exports","counterReducer","state","action","type","sidebarReducer","rootReducer","history","combineReducers","router","connectRouter","count","collapsed","incrementAsync","watchIncrementAsync","rootSagas","delay","ms","Promise","res","setTimeout","put","takeEvery","all","createBrowserHistory","Boolean","window","location","hostname","match","Header","connect","dispatch","toggle","close","props","style","background","padding","boxShadow","className","onClick","Loading","Home","lazy","Hello","Counter","NoMatch","routeList","icon","title","path","exact","component","children","routes","fallback","map","route","key","length","subRoute","RouteWithSubRoutes","Sider","SubMenu","trigger","collapsible","src","logo","alt","theme","mode","defaultSelectedKeys","item","subItem","Item","to","Content","RootContent","margin","minHeight","Root","height","store","preloadedState","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","createStore","createRootReducer","applyMiddleware","routerMiddleware","run","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd638625.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.4ce0a0eb.svg\";","import { Action } from 'redux'\n\nconst counterReducer = (state: number = 0, action: Action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1\n    case 'DECREMENT':\n      return state - 1\n    default:\n      return state\n  }\n}\n\nexport default counterReducer","import { Action } from 'redux';\n\nconst sidebarReducer = (state: boolean = false, action: Action) => {\n  switch (action.type) {\n    case 'TOGGLE_SIDEBAR':\n      return true\n    case 'CLOSE_SIDEBAR':\n      return false\n    default:\n      return state\n  }\n}\n\nexport default sidebarReducer\n","import { combineReducers } from 'redux'\nimport { History } from 'history'\nimport { connectRouter, RouterState } from 'connected-react-router'\nimport counterReducer from './counter'\nimport sidebarReducer from './sidebar'\n\nconst rootReducer = (history: History) =>\n  combineReducers({\n    router: connectRouter(history),\n    count: counterReducer,\n    collapsed: sidebarReducer\n    // rest of reducers\n  })\n\nexport interface ApplicationState {\n  router: RouterState\n  count: number\n  collapsed: boolean\n}\n\nexport default rootReducer\n","import { all, put, takeEvery } from 'redux-saga/effects'\n\nconst delay = (ms: number) => new Promise(res => setTimeout(res, ms))\n\nfunction* incrementAsync() {\n  yield delay(1000)\n  yield put({ type: 'INCREMENT' })\n}\n\nfunction* watchIncrementAsync() {\n  yield takeEvery('INCREMENT_ASYNC', incrementAsync)\n}\n\n// Register all your watchers\nexport default function* rootSagas() {\n  yield all([watchIncrementAsync()])\n}\n","import { createBrowserHistory } from 'history'\nimport { applyMiddleware, compose, createStore } from 'redux'\nimport { routerMiddleware } from 'connected-react-router'\nimport createSagaMiddleware from 'redux-saga'\nimport createRootReducer from './reducers'\nimport rootSagas from './sagas'\n\nexport const history = createBrowserHistory()\n\nexport default function configureStore(preloadedState?: any) {\n  const composeEnhancer: typeof compose =\n    (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n  const sagaMiddleware = createSagaMiddleware()\n  const store = createStore(\n    createRootReducer(history), // root reducer with router state\n    preloadedState,\n    composeEnhancer(\n      applyMiddleware(\n        routerMiddleware(history), // for dispatching history actions\n        sagaMiddleware\n        // ... other middlewares ...\n      )\n    )\n  )\n  sagaMiddleware.run(rootSagas)\n\n  return store\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { Layout, Icon } from 'antd'\nimport { ApplicationState } from 'reducers'\nimport { toggle, close } from 'actions/sidebar'\n\ninterface StateProps {\n  collapsed: boolean\n}\n\ninterface DispatchProps {\n  close: () => void\n  toggle: () => void\n}\n\nconst { Header } = Layout\n\nconst NavBar = (props: StateProps & DispatchProps) => (\n  <Header\n    style={{\n      background: '#fff',\n      padding: 0,\n      boxShadow: '0 1px 4px rgba(0, 21, 41, 0.08)'\n    }}>\n    <Icon\n      className=\"trigger\"\n      type={props.collapsed ? 'menu-unfold' : 'menu-fold'}\n      onClick={props.collapsed ? props.close : props.toggle}\n    />\n  </Header>\n)\n\nconst mapStateToProps = (state: ApplicationState) => ({\n  collapsed: state.collapsed\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  toggle: () => dispatch(toggle()),\n  close: () => dispatch(close())\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(NavBar)\n","export const toggle = () => ({\n  type: 'TOGGLE_SIDEBAR'\n})\n\nexport const close = () => ({\n  type: 'CLOSE_SIDEBAR'\n})\n","import React from 'react'\n\nconst Loading = () => <div>Loading...</div>\n\nexport default Loading\n","import React, { lazy, Suspense } from 'react'\nimport { Route, Switch, RouteProps } from 'react-router'\nimport Loading from 'components/loading'\n\nconst Home = lazy(() => import('containers/Home'))\nconst Hello = lazy(() => import('containers/Hello'))\nconst Counter = lazy(() => import('containers/Counter'))\nconst NoMatch = lazy(() => import('containers/NoMatch'))\n\ninterface RouteEle extends RouteProps {\n  icon?: string\n  title: string\n  children?: RouteEle[]\n  path: string\n}\n\nexport const routeList: RouteEle[] = [\n  {\n    icon: 'home',\n    title: 'Home',\n    path: '/',\n    exact: true,\n    component: Home\n  },\n  {\n    icon: 'smile',\n    title: 'Nest',\n    path: '/nest',\n    exact: false,\n    children: [\n      {\n        icon: 'user-add',\n        title: 'One',\n        path: '/nest/one',\n        exact: true,\n        component: () => <div>One</div>\n      },\n      {\n        icon: 'usergroup-add',\n        title: 'Two',\n        path: '/nest/two',\n        exact: true,\n        component: () => <div>Two</div>\n      }\n    ]\n  },\n  {\n    icon: 'calculator',\n    title: 'Counter',\n    path: '/counter',\n    exact: true,\n    component: Counter\n  },\n  {\n    icon: 'code',\n    title: 'Hello',\n    path: '/hello',\n    exact: true,\n    component: Hello\n  }\n]\n\n// TODO：not good, just support level two\nfunction RouteWithSubRoutes(route: RouteEle) {\n  return (\n    <Route\n      key={route.path}\n      exact={route.exact}\n      path={route.path}\n      component={route.component}>\n      {route.children && route.children.length > 0\n        ? route.children.map((subRoute: RouteEle) => (\n            <Route\n              key={subRoute.path}\n              exact={subRoute.exact}\n              path={subRoute.path}\n              component={subRoute.component}\n            />\n          ))\n        : null}\n    </Route>\n  )\n}\n\nconst routes = (\n  <Suspense fallback={<Loading />}>\n    <Switch>\n      {routeList.map(route => RouteWithSubRoutes(route))}\n      <Route component={NoMatch} />\n    </Switch>\n  </Suspense>\n)\n\nexport default routes\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { Layout, Menu, Icon } from 'antd'\nimport { routeList } from 'routes'\nimport { ApplicationState } from 'reducers'\nimport logo from 'assets/logo.svg'\n\ninterface StateProps {\n  collapsed: boolean\n}\n\nconst { Sider } = Layout\nconst { SubMenu } = Menu\n\nconst SideBar = (props: StateProps) => (\n  <Sider trigger={null} collapsible collapsed={props.collapsed}>\n    <div className=\"sider-menu-logo\">\n      <img src={logo} alt=\"logo\" />\n      <h1>React Admin</h1>\n    </div>\n    <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['/']}>\n      {routeList.map(item =>\n        item.children && item.children.length > 0 ? (\n          <SubMenu\n            key={item.path}\n            title={\n              <span>\n                <Icon type={item.icon} />\n                <span>{item.title}</span>\n              </span>\n            }>\n            {item.children.map(subItem => (\n              <Menu.Item key={subItem.path}>\n                <Icon type={subItem.icon} />\n                <span>{subItem.title}</span>\n                <Link to={subItem.path} />\n              </Menu.Item>\n            ))}\n          </SubMenu>\n        ) : (\n          <Menu.Item key={item.path}>\n            <Icon type={item.icon} />\n            <span>{item.title}</span>\n            <Link to={item.path} />\n          </Menu.Item>\n        )\n      )}\n    </Menu>\n  </Sider>\n)\n\nconst mapStateToProps = (state: ApplicationState) => ({\n  collapsed: state.collapsed\n})\n\nexport default connect(mapStateToProps)(SideBar)\n","import React from 'react'\nimport { Layout } from 'antd'\nimport routes from 'routes'\n\nconst { Content } = Layout\n\nconst RootContent = () => (\n  <Content\n    style={{\n      margin: '24px 16px',\n      padding: 24,\n      background: '#fff',\n      minHeight: 280\n    }}>\n    {routes}\n  </Content>\n)\n\nexport default RootContent\n","import React from 'react'\nimport { Layout } from 'antd'\nimport NavBar from './NavBar'\nimport SideBar from './SideBar'\nimport Content from './Content'\nimport './Layout.scss'\n\nconst Root = () => (\n  <Layout style={{ height: '100%' }}>\n    <SideBar />\n    <Layout>\n      <NavBar />\n      <Content />\n    </Layout>\n  </Layout>\n)\n\nexport default Root\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { ConnectedRouter } from 'connected-react-router'\nimport configureStore, { history } from './configureStore'\nimport * as serviceWorker from './serviceWorker'\nimport Layout from './containers/Layout'\nimport './index.less'\n\nconst store = configureStore()\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <Layout />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}